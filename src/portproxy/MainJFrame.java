/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package portproxy;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;
import jdk.nashorn.internal.runtime.regexp.joni.constants.OPCode;

/**
 *
 * @author jerry
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * 根据不同的系统 实例不同的
     */
    public OsInterface NewOs;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        ImageIcon icon = new ImageIcon(this.getClass().getResource("/image/ico.jpg"));
        this.setIconImage(icon.getImage());

        //根据不同的os 加载不同的类
        String OsName = System.getProperty("os.name");
        //先检查是不是win
        Class OsClass = null;
        if (OsName.indexOf("Windows") > -1) {
            OsClass = WinControlService.class;
        } else if (OsName.indexOf("Mac") > -1) {
            OsClass = LinuxControlService.class;
        } else if (OsName.indexOf("Linux") > -1) {
            OsClass = LinuxControlService.class;
        } else {
            //不是符合的系统，终止运行
            MsgBox("此程序只能运行在Win  Mac Linux 桌面模式下！您当前系统不再范围内。");
            System.exit(0);
        }
        try {
            NewOs = (OsInterface) OsClass.newInstance();
        } catch (InstantiationException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
 
        initComponents();
        setLocationRelativeTo(null);
        //加载时候刷新列表
        
        GetList();
         
        //监听列表点击
        jList1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
//                    System.out.println("双击");
                    JList myList = (JList) e.getSource();
                    int index = myList.getSelectedIndex();    //已选项的下标
                    if (index < 0) {
                        return;
                    }

                    //弹出询问狂
                    int n = JOptionPane.showConfirmDialog(null, "您确认要删除此条转发规则吗？", "询问", JOptionPane.YES_NO_OPTION);
                    if (n == 0) {
                        Object obj = myList.getModel().getElementAt(index);  //取出数据

                        String linetext = obj.toString();
                        String[] listq = linetext.split(" ");
                        String newlistString = "";
                        //把数据切割成空格分割的，然后重新拼接指令
                        for (int i = 0; i < listq.length; i++) {
                            if (!listq[i].equals("")) {
//                                System.out.println(listq[i] + "(" + i + ")");
                                newlistString = newlistString + "," + listq[i];
                            }

                        }
                        //组成cmd命令
                        String[] newlist_q = newlistString.split(",");
                        //删除转发
                        Boolean back = NewOs.DelOnePort(newlist_q[1], newlist_q[2]);
                        if (back) {
                            MsgBox("删除完毕！");
                            GetList();
                            return;
                        } else {
                            MsgBox("删除失败！");
                            return;
                        }

                    }

                }
            }
        });
 
        InetAddress addr;
        try {
            addr = InetAddress.getLocalHost();
            String ip = addr.getHostAddress(); //获得本机IP　

            fromIp.setText(ip);
        } catch (UnknownHostException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        fromIp = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fromPort = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        toIp = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        toPort = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        msgbox = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("win端口转发管理器v1--JerryStark");

        jLabel1.setText("添加新端口转发：");

        jLabel2.setText("源IP：");

        jLabel3.setText("源端口：");

        fromPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromPortActionPerformed(evt);
            }
        });

        jLabel4.setText("转发到IP:");

        toIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toIpActionPerformed(evt);
            }
        });

        jLabel5.setText("端口：");

        jButton1.setText("添加端口转发");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromIp, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(toIp, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toPort, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(msgbox, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(msgbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(fromPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(toIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(toPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fromPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromPortActionPerformed

    /**
     * 添加端口按钮操作
     *
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String from_ip = fromIp.getText();
        String form_port = fromPort.getText();
        String to_ip = toIp.getText();
        String to_port = toPort.getText();

        //检测为空
        if (from_ip.equals("")) {
            MsgBox("源IP不能为空！");
            return;
        }
        if (form_port.equals("")) {
            MsgBox("源端口不能为空！");
            return;
        }
        if (to_ip.equals("")) {
            MsgBox("转发到ip不能为空！");
            return;
        }
        if (to_port.equals("")) {
            MsgBox("转发到端口不能为空！");
            return;
        }

        //运行写出到规则
        Boolean back = NewOs.SetOnePort(from_ip, form_port, to_ip, to_port);
        if (back) {
            MsgBox("完成了" + from_ip + "：" + form_port + " 到 " + to_ip + "：" + to_port + "的转发配置。");
            GetList();
            return;
        } else {
            MsgBox("添加失败！");
            return;
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void toIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toIpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);

            }
        });
    }

    /**
     * 便捷的消息弹出提醒
     *
     * @param message
     */
    private void MsgBox(String message) {
        JOptionPane.showMessageDialog(null, message, "提示", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * 获取转发列表并刷新
     */
    private void GetList() {
        //新的获取列表
        Vector port_list = NewOs.GetPortList();
        //更新显示列表
        jList1.setListData(port_list);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fromIp;
    private javax.swing.JTextField fromPort;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel msgbox;
    private javax.swing.JTextField toIp;
    private javax.swing.JTextField toPort;
    // End of variables declaration//GEN-END:variables
}
